# flask-api/celery_worker.py
from celery import Celery
import docker
from app import app  

def make_celery(app):
    celery = Celery(
        app.import_name,
        broker=app.config['CELERY_BROKER_URL'],
        backend=app.config['CELERY_RESULT_BACKEND']
    )
    celery.conf.update(app.config)
    TaskBase = celery.Task

    class ContextTask(TaskBase):
        def __call__(self, *args, **kwargs):
            with app.app_context():
                return TaskBase.__call__(self, *args, **kwargs)
    celery.Task = ContextTask
    return celery

# Configuraci√≥n de Celery
app.config.update(
    CELERY_BROKER_URL='redis://redis:6379/0',
    CELERY_RESULT_BACKEND='redis://redis:6379/0'
)

celery = make_celery(app)

@celery.task()
def run_data_analysis():
    client = docker.from_env()
    try:
        da_container = client.containers.get("data_analysis_service")
        if da_container.status == "exited":
            da_container.start()
        elif da_container.status == "running":
            da_container.restart()
        else:
            da_container.remove()
            da_container = client.containers.run(
                "data_analysis_image",
                name="data_analysis_service",
                detach=True,
                environment={
                    "DB_HOST": "db",
                    "DB_PASSWORD_FILE": "/run/secrets/db-password"
                },
                volumes={
                    './data_analysis': {'bind': '/app/data_analysis', 'mode': 'rw'}
                }
            )
        da_container.wait()
        logs = da_container.logs(stdout=True, stderr=True).decode("utf-8")
        if not logs:
            logs = "No output generated by the script."
        return {"output": logs, "message": "Execution completed successfully"}
    except docker.errors.NotFound:
        da_container = client.containers.run(
            "data_analysis_image",
            name="data_analysis_service",
            detach=True,
            environment={
                "DB_HOST": "db",
                "DB_PASSWORD_FILE": "/run/secrets/db-password"
            },
            volumes={
                './data_analysis': {'bind': '/app/data_analysis', 'mode': 'rw'}
            }
        )
        da_container.wait()
        logs = da_container.logs(stdout=True, stderr=True).decode("utf-8")
        if not logs:
            logs = "No output generated by the script."
        return {"output": logs, "message": "Execution completed successfully"}
    except Exception as e:
        return {"error": str(e)}
